{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE OverloadedStrings #-}

-- | Datatypes for analysis application API.

module DataAnalysis.Application.Types
  (VisualizationType(..)
  ,ExportType(..)
  ,AnalysisAppConfig(..)
  ,DataPoint(..))
  where

import Data.Aeson (ToJSON)
import Data.ByteString.Lazy (ByteString)
import Data.Default (Default(..))
import Data.Text (Text,pack)
import GHC.Generics

-- | The type of visualization used to show some data.
data VisualizationType
  = LineChart
  | BarChart
  | PieChart
  deriving (Show,Enum,Eq)

-- | Default chart type to use for data.
instance Default VisualizationType where
  def = LineChart

-- | The format to export data generated by an analysis.
data ExportType
  = JsonData
  | CsvData
  | XmlData
  deriving (Show,Enum,Eq)

-- | Default export type used if none is specified.
instance Default ExportType where
  def = JsonData

-- | A data point which can be rendered onto a chart of some kind.
data DataPoint
  = TripleText Text Text Double -- ^ Can be rendered onto a line or bar chart.
  | TripleDouble Text Double Double -- ^
  | Tuple Text Double   -- ^ Can be rendered onto a pie, line or bar chart, etc.
  deriving (Show,Generic)

-- | Data points can be sent to the client in JSON form, but the value
--   in the triple should at least be enumerable.
instance ToJSON DataPoint

-- | Configuration for the analysis app.
data AnalysisAppConfig params source = AnalysisAppConfig
  { analysisFunc :: params -> [source] -> IO [DataPoint]
  , analysisTitle :: Text
  , analysisDefVisualization :: VisualizationType
  , analysisDefDataExport :: ExportType
  , analysisParser :: ByteString -> IO (Maybe [source])
  , analysisPrint :: source -> Text
  }

-- | Default configuration, doesn't produce any results.
instance (Show source,Default params) => Default (AnalysisAppConfig params source) where
  def = AnalysisAppConfig
    { analysisFunc = \_params _data -> return []
    , analysisTitle = "Untitled Analysis Application"
    , analysisDefVisualization = def
    , analysisDefDataExport = def
    , analysisParser = const (return Nothing)
    , analysisPrint = \source -> pack (show source)
    }
