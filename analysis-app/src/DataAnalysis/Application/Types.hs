{-# LANGUAGE ExistentialQuantification #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE OverloadedStrings #-}

-- | Datatypes for analysis application API.

module DataAnalysis.Application.Types
  (VisualizationType(..)
  ,ExportType(..)
  ,AnalysisAppConfig(..)
  ,DataPoint(..)
  ,dataLabel
  ,dataValue
  ,dataGroup
  ,App(..)
  ,Source(..)
  ,GenericApp(..))
  where

import Control.Concurrent.STM
import Data.ByteString.Lazy (ByteString)
import Data.Default
import Data.IntMap (IntMap)
import Control.Lens.TH
import Data.Text (Text,pack)
import Data.Time
import Yesod

-- | The type of visualization used to show some data.
data VisualizationType
  = LineChart
  | BarChart
  | PieChart
  deriving (Show,Enum,Eq)

-- | Default chart type to use for data.
instance Default VisualizationType where
  def = LineChart

-- | The format to export data generated by an analysis.
data ExportType
  = JsonData
  | CsvData
  | XmlData
  deriving (Show,Enum,Eq)

-- | Default export type used if none is specified.
instance Default ExportType where
  def = JsonData

-- | A data point which can be rendered onto a chart of some kind.
data DataPoint = DP
  { _dataLabel :: Text
  , _dataValue :: Double
  , _dataGroup :: Maybe Text
  } deriving (Show)

$(makeLenses ''DataPoint)

instance ToJSON DataPoint where
  toJSON (DP label value group') =
    case group' of
      Nothing -> toJSON [toJSON label
                        ,toJSON value]
      Just group'' -> toJSON [toJSON label,toJSON value,toJSON group'']

-- | Configuration for the analysis app.
data AnalysisAppConfig params source = AnalysisAppConfig
  { analysisFunc :: params -> [source] -> IO [DataPoint]
  , analysisTitle :: Text
  , analysisDefVisualization :: VisualizationType
  , analysisDefDataExport :: ExportType
  , analysisParser :: ByteString -> IO (Maybe [source])
  , analysisPrint :: source -> Text
  , analysisForm :: Html -> MForm (HandlerT GenericApp IO)
                                  (FormResult params,WidgetT GenericApp IO ())
  }

-- | Default configuration, doesn't produce any results.
instance (Show source,Default params) => Default (AnalysisAppConfig params source) where
  def = AnalysisAppConfig
    { analysisFunc = \_params _data -> return []
    , analysisTitle = "Untitled Analysis Application"
    , analysisDefVisualization = def
    , analysisDefDataExport = def
    , analysisParser = const (return Nothing)
    , analysisPrint = \source -> pack (show source)
    , analysisForm = const undefined
    }

-- | Yesod app type.
data App source params = App
  { appParser     :: !(ByteString -> IO (Maybe [source]))
  , appPrinter    :: !(source -> Text)
  , appAnalyzer   :: !(params -> [source] -> IO [DataPoint])
  , appCounter    :: !(TVar Int)
  , appStore      :: !(TVar (IntMap (Source source)))
  , appTitle      :: !Text
  , appParamsForm :: !(Html -> MForm (HandlerT GenericApp IO)
                                     (FormResult params,WidgetT GenericApp IO ()))
  }

-- | A generic app.
data GenericApp =
  forall source params.
  Default params =>
  GApp (App source params)

-- | An imported data source.
data Source source = Source
  { srcParsed    :: ![source]
  , srcTimestamp :: !UTCTime
  }
