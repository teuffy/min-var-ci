$(function(){
    setupChartChoices();
    setupAutoReload();
    setupSourcePolling();
    setupTableSort();
});

// When they check the checkbox in the polling form, refresh the page
// on an interval with a URL that forces the server to re-download the
// data source.
function setupSourcePolling() {
    var poll = $('#poll').parent();
    var interval = $('#interval').parent();
    var timer;
    poll.hide();
    interval.hide();
    var fields = $('#poll-fields');
    fields.append(poll).append(interval);
    fields.children().show();
    var i = Math.max($('#interval').val() * 1,3);
    $('#interval').val(i);
    var file = $('#parameters-form').data('file');
    if($('#poll').attr('checked'))  {
        var stop = $('<button>Stop</button>');
        $('#poll-fields').append(stop.click(function(){
            clearTimeout(timer);
            stop.remove();
            $('#poll').removeAttr('checked');
            $('#parameters-form').submit();
        }));
        function reload(){
            clearTimeout(timer);
            if($('#poll').attr('checked'))
                $.get('/reload/' + file + '/' + i,function(refresh){
                    if(refresh == "True")
                        window.location.reload();
                    else
                        setTimeout(reload,1000 * i);
                });
        }
        reload();
    }
}

// Make the page reload when the server has restarted
function setupAutoReload() {
    var lastTime = null;
    setInterval(function(){
        $.get('/start-time',function(t){
            if(lastTime && lastTime !== t) {
                window.location.reload();
            } else {
                lastTime = t;
            }
        });
    },1000);
}

// Setup the charts list of choices
function setupChartChoices(){
    $('#chart').hide();
    var data = $('#placeholder').data('data-points');
    if(data[0]) {
        if (data[0].DP3)
            tee3dChoices(data);
        else
            flotJsChoices(data);
    }
}

// Setup teechart 3D choices
function tee3dChoices(data){
    var l = $('#chart-choices');
    choice(l,'NURBS Heatmap',makeNurbs(data));
    // default
    makeNurbs(data)();
}

// Setup flotjs chart choices
function flotJsChoices(data){
    var l = $('#chart-choices');
    choice(l,'Bar',makeChart('Bar',data));
    choice(l,'Line',makeChart('Line',data));
    choice(l,'Pie',makeChart('Pie',data));
    // default
    makeChart($('#graph_type').val(),data,true)();
}

// Add a chart choice
function choice(list,title,onclick){
    list.append($('<li></li>')
                .append($('<a href="#"></a>')
                        .text(title)
                        .click(onclick)));
}

// Make a chart of the given type
function makeChart(type,data,first){
    return function(e){
        $('#graph_type').val(type);
        var groups = Object.create(null);
        var mode = undefined;
        for (var i = 0, len = data.length; i < len; i++) {
            var datum = data[i].DP2;
            var group = data[2] || 0;
            groups[group] = groups[group] || [];
            var label = datum[0];
            var value = datum[1];
            var labeln = parseFloat(label);
            if (false) {
                label = labeln;
            } else {
                mode = "categories";
            }
            groups[group].push([label,value]);
        }
        var groupList = [];
        for (var group in groups) {
            groupList.push(groups[group]);
        }
        if (type === 'Bar') {
            $.plot("#placeholder", groupList, {
		series: {
		    bars: {
			show: true,
			barWidth: 0.6,
			align: "center"
		    }
		},
		xaxis: {
		    mode: mode,
		    tickLength: 0,
                    show: groupList[0].length <= 20
		}
	    });
        } else if (type === 'Line') {
	    $.plot("#placeholder", groupList,{
                xaxis: {
                    mode: mode,
                    show: groupList[0].length <= 20
                }
            });
        } else if (type == 'Pie') {
            var series = [];
            for (var i = 0, len = groupList[0].length; i < len; i++) {
                series.push({ label: groupList[0][i][0],
                              data: groupList[0][i][1]
                            });
            }
            $.plot('#placeholder', series, {
                series: {
                    pie: {
                        show: true,
                        label: { show: series.length < 20 }
                    }
                },
                legend: {
                    show: series.length <= 20
                }
            });
        }
        if(e) e.preventDefault();
        return true;
    }
}

// Make a non-uniform rational B-spline
function makeNurbs(data){
    return function(){
        var three, Chart1, surface;
        function draw() {
            // Create 3D WebGL context:
            $('#canvas-3d').show();
            three  = new Tee.Three("canvas-3d");
            // Create Chart:
            Chart1 = new Tee.Chart(three);
            Chart1.walls.visible=false;
            // Create Surface:
            surface = new Tee.Surface();

            var row, rows = 200, cols = 100;
            surface.data.values = [];
            for (var y=0; y<rows; y++) {
                row=new Array(cols);
                surface.data.values[y]=row;
                for (var x=0; x<cols; x++)
                    row[x] = 500+ Math.cos(0.001*x*y)*(x*x-y*y);
            }
            surface.dataChanged=true; // <-- force recalculating pixel colors

            // Add Surface series to Chart:
            Chart1.addSeries(surface);
            // // Looking at chart with the camera facing the x-axis, where x is width,
            // // z is height, and y is distance.
            // //
            // //        | z
            // //        |
            // //        |
            // //        |0
            // //       / \
            // //      /   \
            // //   x /     \ y
            // //
            // // Then the array of arrays corresponds thusly:
            // //
            // //  0     y
            // //  <----->
            // // [[z,z,z], ^ 0
            // //  [z,z,z], |
            // //  [z,z,z]] v x
            // //
            // //
            // var values = [];
            // var maxX = 0, maxY = 0;
            // // Calculate maxes of coordinates
            // for (var i = 0, len = data.length; i < len; i++) {
            //     var d = data[i].DP3;
            //     maxX = Math.max(maxX,d[0]);
            //     maxY = Math.max(maxY,d[1]);
            // }
            // // Create array to fill in
            // var rows = new Array(maxX + 1);
            // for (var x = 0; x <= maxX; x++) {
            //     rows[x] = new Array(maxY + 1);
            //     for (var y = 0; y <= maxY; y++) {
            //         rows[x][y] = 0;
            //     }
            // }
            // // Fill in the multi-dimensional array
            // for (var i = 0, len = data.length; i < len; i++) {
            //     var d = data[i].DP3;
            //     var x = d[0], y = d[1], z = d[2];
            //     rows[x][y] = z;
            // }
            // surface.data.values = rows;
            // surface.dataChanged=true;
            // Cosmetics:
            Chart1.title.text="NURBS";
            Chart1.walls.back.size=0.2;
            Chart1.walls.back.format.transparency=0.2;
            // Valid webGL ?
            if (three.isEnabled()) {
                Chart1.draw();
                animate();
            }
            else
                Detector.addGetWebGLMessage(); // Show message (WebGL not available)
            three.floor.visible = false;
            // Loop
            function animate() {
                three.update();
                requestAnimationFrame( animate );
            }
        }
        // Simple random data:
        function addRandom(rows,cols) {
            var row;
            surface.data.values=[];
            for (var y=0; y<rows; y++) {
                row=new Array(cols);
                surface.data.values[y]=row;
                for (var x=0; x<cols; x++)
                    row[x] = 500+ Math.cos(0.001*x*y)*(x*x-y*y);
            }
            surface.dataChanged=true; // <-- force recalculating pixel colors
        }
        draw();
    }
}

// Make tables sortable
function setupTableSort(){
    $('.table').tablesorter();
}
